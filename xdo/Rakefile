#Encoding: UTF-8
#This file is part of Xdo. 
#Copyright © 2009 Marvin Gülker
#  Initia in potestate nostra sunt, de eventu fortuna iudicat. 
require "rake/gempackagetask"
require "rake/testtask"
begin
  require "hanna/rdoctask"
rescue LoadError
  require "rake/rdoctask"
end

spec = Gem::Specification.new do |s|
  s.name = "xdo"
  s.summary = "Simulate keyboard and mouse input via a ruby interface to xdotool and other console programs."
  s.description =<<DESCRIPTION
XDo is a library to automate your mouse, fake keyboard input and 
manipulate windows in a Linux X server environment. It's wrapped 
around a lot of command line tools (see requirements) of which xdotool 
is the main one, the others are usually installed. It's designed to work 
only with Ruby 1.9. 
DESCRIPTION
  s.add_development_dependency("test-unit", ">= 2.0")
  s.requirements = ["The xdotool command-line tool.", "The xsel command-line tool.", "xwininfo (usually installed)", "eject (usually installed)", "xkill (usually installed)"]
  s.version = File.read("VERSION").sub(/\(.*?\)/, "").rstrip.gsub("-", ".")
  s.author = "Marvin Gülker"
  s.email = "sutniuq@gmx.net"
  s.platform = Gem::Platform::RUBY
  s.required_ruby_version = ">=1.9"
  s.files = ["bin/xinfo.rb", Dir["lib/**/*.rb"], Dir["test/*.rb"], Dir["samples/*.rb"], "README.rdoc", "HISTORY.rdoc", "DEPRECATE.rdoc", "VERSION"].flatten
  s.executables = ["xinfo.rb"]
  s.has_rdoc = true
  s.extra_rdoc_files = %w[README.rdoc HISTORY.rdoc DEPRECATE.rdoc]
  s.rdoc_options << "-t" << "XDo RDocs" <<  "-m" << "README.rdoc"
  s.test_files = Dir["test/test_*.rb"]
  s.rubyforge_project = "Automations"
  s.homepage = "http://auto.rubyforge.org"
end
Rake::GemPackageTask.new(spec).define

Rake::RDocTask.new do |rd|
  rd.rdoc_files.include("lib/**/*.rb", "**/*.rdoc")
  rd.title = "XDo RDocs"
  rd.main = "README.rdoc"
  rd.rdoc_dir = "doc"
end

Rake::TestTask.new("test") do |t|
  t.pattern = "test/test_*.rb"
  t.warning = true
end

desc "Tests XDo and then builds the gem file."
task :full_gem => [:test, :gem]

desc "Update the development version number"
task :version do
  puts "Updating to a new development version."
  puts "Ensure incrementing the major, minor and tiny number apropriately!"
  
  old_version = File.read("VERSION").rstrip
  new_version = old_version.dup
  if old_version =~ /\((.*?)\)/ #Starting from a development version
    new_version.sub!($1, Time.now.strftime("%d.%m.%Y %H:%M"))
  else #Starting from a non-development version
    new_version << "-dev (#{Time.now.strftime("%d.%m.%Y %H:%M")})"
  end
  
  File.open("VERSION", "w"){|file| file.write(new_version)}
  
  puts "Old version was '#{old_version}'. "
  puts "New version is '#{new_version}'. "
end

desc "Remove the date from the version number"
task :finalize_version do
  puts "Updating to a new final version."
  puts "Ensure incrementing the major, minor and tiny number apropriately!"
  
  old_version = File.read("VERSION").rstrip
  new_version = old_version.sub(/-dev \(.*?\)/, "")
  
  File.open("VERSION", "w"){|file| file.write(new_version)}
  
  puts "Old version was '#{old_version}'. "
  puts "New version is '#{new_version}'. "
end

task :gem => :finalize_version
